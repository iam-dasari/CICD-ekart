name: CI-CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
      # Stage: Git Checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # Stage: Set up JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      # Stage: Code Compile
      - name: Compile Code
        run: mvn clean compile

      # Stage: Unit Testing
      - name: Run Unit Tests
        run: mvn test -Dmaven.test.skip=true

      # Stage: SonarQube Analysis
      - name: SonarQube Scan
        uses: sonarsource/sonarcloud-github-action@v2
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=demo1
            -Dsonar.projectName=demo1
            -Dsonar.java.binaries=target/classes
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # Stage: OWASP Dependency Check
      - name: Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'demo'
          path: '.'
          format: 'ALL'
          out: 'reports'
      - name: Upload Dependency Check Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports

      # Stage: Build
      - name: Build Package
        run: mvn package -Dmaven.test.skip=true

      # Stage: Deploy to Nexus
      - name: Deploy to Nexus
        run: mvn deploy -Dmaven.test.skip=true
        env:
          MAVEN_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}

      # Stage: Docker Login
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Stage: Docker Build
      - name: Build Docker Image
        run: docker build -t dasaridevops/cicd-ekart:latest -f docker/Dockerfile .

      # Stage: Trivy Scan
      - name: Run Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: dasaridevops/cicd-ekart:latest
          format: 'table'
          output: 'trivy-report.txt'
      - name: Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.txt

      # Stage: Docker Push
      - name: Push Docker Image
        run: docker push dasaridevops/cicd-ekart:latest
